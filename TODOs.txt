########################################################################################
# TODOs List
########################################################################################

- describe graphs
- tell to the profe that she can see an updated version in github.com of the project

########################################################################################
DONE - implement permutations
DONE - implement mergesort
DONE - implement mergesort with comparison counter inside
DONE - formula for comparison counter in mergesort
DONE - implement getRandomVector
DONE - implement time module
DONE - implement for-loop that collects [n, realCounter, analiticalCounter, timeElapsed]
DONE - implement quicksort
DONE - implement quicksort with comparison counter
DONE - implement quicksort with partition counter (?)
DONE - implement quicksort with swap counter
DONE - implement printData, printDataHead, printDataTail for quicksort results
DONE - add formulas for numComparisons and numSwaps of quicksort
DONE - implement writeCSV
DONE - maybe there is a bug in the formula of the mergesort comparisons counter
DONE - remove all printData that are quite useless
DONE - implement a python script that collects data using cpp main
DONE - do some fancy plots
DONE - allow main.exe to take as input arguments vectorLength for both mergesort and quicksort
DONE - put all this stuff on github
DONE - edit mergesort xlabel in number of comparisons instead of average number of comparisons
DONE - add a function that generates randomly a permutation using this procedure:
  - given a vector of length n
  - order the vector
  - extract an integer from 0 to n-1
  - swap the n-1 element with the i-th
  - extract another integer from 0 to n-2
  - repeat until n-n+1
DONE - add a graph for comparing the number of comparisons of mergesort and average number
  of comparisons of quicksort
DONE - write what you have done in the README.md

